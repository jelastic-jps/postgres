type: update
id: postgres-master-slave-auto-cluster
baseUrl: https://raw.githubusercontent.com/jelastic-jps/postgres/v2.0.0
logo: /images/postgres-70x70.png
name: PostgreSQL Primary-Secondary Auto-Cluster

targetNodes: none
nodeGroupAlias:
  ${settings.nodeGroup}: sqldb
  
onInstall: init

globals: 
  pgpoolintpass: ${settings.pgpoolintpass:[fn.password]}
  postgresqlConf: '/var/lib/pgsql/data/postgresql.conf'
  
onBeforeRemoveNode[sqldb]:
  if (nodes.sqldb.length == 1):
    install:
      type: update
      name: PostgreSQL Primary-Secondary Auto-Cluster
      id: postgres-master-slave-auto-cluster

onAfterResetServicePassword[sqldb]:
  - copyPcpassFile

onAfterResetNodePassword[sqldb]:
  - copyPcpassFile

onAfterScaleOut[sqldb]:
  - setMaxWalSenders
  - copyPcpassFile
  - if ('${settings.is_pgpool2}' == 'true'):
    - adjustConfigs4PgpoolUser
  - getPswd
  - getNodes
  - forEach(event.response.nodes):
      initSecondary:
        id: ${@i.id}
        ip: ${@i.address}
  - forEach(nodes.sqldb):
     if (${@i.id} != ${nodes.sqldb.master.id}):
       cmd[${@i.id}]: jcm updateHbaConf ${globals.nodes_address} ${@i.address}
  - if ('${settings.is_pgpool2}' == 'true'):
    - forEach(event.response.nodes):
      - addPgNodesToPgPool:
          pgaddress: ${@i.address}
    - forEach(pgpoolnode:nodes.pgpool):
      - generateAndTransferSSHKeys:
          id: ${@pgpoolnode.id}
    - addToKnownHosts
    - forEach(event.response.nodes):
      - addAppNameToConinfo:
          id: ${@i.id}
          address: ${@i.address}
          
onBeforeScaleIn[pgpool]:
  - forEach(pgpoolnode:event.response.nodes):
    - removeWatchdogConfig:
        pgpoolAddress: ${@pgpoolnode.address}
    - cmd[sqldb]: |-
        sed -ci -e '/${@pgpoolnode.address}/d' /var/lib/pgsql/data/pg_hba.conf;
        sed -ci -e '/postgres@node${@pgpoolnode.id}-/d' /var/lib/pgsql/.ssh/authorized_keys;
        systemctl reset-failed pgpool-II.service
      user: root  
  - cmd[sqldb,pgpool]: jem service restart
          
onAfterScaleOut[pgpool]:
  - preparePgpoolNodes
  - cmd[${event.response.nodes.join(id,)}]: rm -f ~/.ssh/id_rsa ~/.ssh/id_rsa.pub
  - forEach(pgpoolnode:event.response.nodes):
     - generateAndTransferSSHKeys:
         id: ${@pgpoolnode.id}  
  - cmd[pgpool]: jcm enableWatchdog
    user: root
  - forEach(pgpoolnode:nodes.pgpool):
    - cmd[sqldb]: grep -q '${@pgpoolnode.address}' /var/lib/pgsql/data/pg_hba.conf || sed -ci -e '1i host    all             pgpool          ${@pgpoolnode.address}/32         trust' /var/lib/pgsql/data/pg_hba.conf;
    - getPgPoolNodesCount
    - setPgpoolNodeId:
        pgPoolNode: ${@pgpoolnode.id}
    - addWatchdogConfig:
        pgpoolAddress: ${@pgpoolnode.address}
  - addToKnownHosts
  - fixPgpassPermissions

onAfterScaleIn[sqldb]:
  - getNodes
  - forEach(nodes.sqldb):
     cmd[${@i.id}]: jcm updateHbaConf ${globals.nodes_address} ${@i.address}
  - if ('${settings.is_pgpool2}' == 'true'):
    - forEach(event.response.nodes):
      - removePgNodesFromPgPool:
          pgaddress: ${@i.address}
      - cmd[pgpool]: |-
          sed -ci -e '/^${@i.address}/d'  ~/.ssh/known_hosts
  - fixPgpassPermissions

onAfterScaleIn[pgpool]:
  - if (nodes.pgpool.length == 1):
    - cmd[pgpool]: jcm disableWatchdog
    - removeWatchdogConfig:
        pgpoolAddress: ${nodes.pgpool.master.address}
    - cmd[pgpool]: |-
        rm -f /etc/pgpool-II/pgpool_node_id
        sed -ci -e 's/use_watchdog/#use_watchdog/' /etc/pgpool-II/pgpool.conf 
        jem service restart

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install:
      jps: ${baseUrl}/addons/auto-cluster.yaml
      envName: ${event.response.env.envName}
      settings:
        pgpoolintpass: ${settings.pgpoolintpass}
        nodeGroup: ${settings.nodeGroup}    
        is_pgpool2: ${settings.is_pgpool2}
        clone: true

onBeforeMigrate:
  if (${env.status} != 1):
    stopEvent:
      type: warning
      message: Migration of stopped PostgreSQL Primary-Secondary Auto-Cluster is not supported.

onAfterMigrate:
  init: 
    update: true

actions:
  init:
    - setMaxWalSenders
    - if (${settings.clone:false} || ${this.update:false}):
      - cmd[${nodes.sqldb.master.id}]: jcm removeAllReplicaHosts
      - getPswd
      - getNodes
      - forEach(nodes.sqldb):
          - if (${@i.id} != ${nodes.sqldb.master.id}): 
            - cmd[${nodes.sqldb.master.id}]: |-
                jcm addReplicaHost ${@i.address} &>> /var/log/run.log
                sudo jem service reload
            - cmd[${@i.id}]: |-
                jcm updatePrimaryConnInfo &>>/var/log/run.log
                jcm updateHbaConf ${globals.nodes_address} ${@i.address}
                sudo jem service restart
      - if ('${settings.is_pgpool2}' == 'true'):
        - cmd[pgpool]: |-
            jcm cleanupNodesFromPgpool2Conf &>>/var/log/run.log
            systemctl reset-failed pgpool-II.service
          user: root
    - else: 
      - setNodeDisplayName[${nodes.sqldb.master.id}]: Primary
      - initPrimary
      - getNodes
      - forEach(nodes.sqldb):
        - if (${@i.id} != ${nodes.sqldb.master.id}):
          - initSecondary:
              id: ${@i.id}
              ip: ${@i.address}
          - cmd[${@i.id}]: |-
             jcm updateHbaConf ${globals.nodes_address} ${@i.address}
             sudo jem service reload
      - if ('${settings.is_pgpool2}' == 'true'):
        - adjustConfigs4PgpoolUser
        - cmd[${nodes.sqldb.master.id}]: psql -U webadmin -d postgres -c "CREATE USER pgpool REPLICATION LOGIN CONNECTION LIMIT -1 ENCRYPTED PASSWORD '${globals.pgpoolintpass}' IN ROLE pg_monitor;"
        - preparePgpoolNodes
    - copyPcpassFile
    - if ('${settings.is_pgpool2}' == 'true'):
      - forEach(nodes.sqldb):
        - addPgNodesToPgPool:
            pgaddress: ${@i.address}
      - forEach(pgpoolnode:nodes.pgpool):
        - generateAndTransferSSHKeys:
            id: ${@pgpoolnode.id}
        - cmd[sqldb]: sed -ci -e '1i host    all             pgpool          ${@pgpoolnode.address}/32        md5' /var/lib/pgsql/data/pg_hba.conf;
      - if (nodes.pgpool.length > 1):
        - cmd[pgpool]: |-
            jcm enableWatchdog;
            systemctl reset-failed pgpool-II.service;
          user: root
        - forEach(pgpoolnode:nodes.pgpool):
          - getPgPoolNodesCount
          - setPgpoolNodeId:
              pgPoolNode: ${@pgpoolnode.id}
          - addWatchdogConfig:
              pgpoolAddress: ${@pgpoolnode.address}        
      - cmd[sqldb]: jem service restart
      - cmd[pgpool]: |-
          systemctl reset-failed pgpool-II.service; 
          jem service restart
        user: root
      - forEach(nodes.sqldb):
        - addAppNameToConinfo:
            id: ${@i.id}
            address: ${@i.address}
      - cmd[${nodes.pgpool.master.id}]: cat /var/lib/pgsql/.pcppass |awk -F ':' '{print $4}'
      - setGlobals:
          pgpoolPasswd: '${response.out}'
          successPath: /text/success-pgpool.md?_r=${fn.random}
    - else:
      - setGlobals:
          successPath: /text/success.md?_r=${fn.random}
    - fixPgpassPermissions

  addToKnownHosts:
    - forEach(pgnode:nodes.sqldb):
      - cmd[pgpool]: |-
          ssh-keygen -R ${@pgnode.address}
          ssh-keyscan ${@pgnode.address} 2>&1 1>> ~/.ssh/known_hosts

  copyPcpassFile:
    - cmd[${nodes.sqldb.master.id}]: cat /var/lib/pgsql/.pgpass
    - cmd[sqldb]: echo '${response.out}' > /var/lib/pgsql/.pgpass
  
  generateAndTransferSSHKeys:
    - cmd[${this.id}]: |-
        [ -f "/var/lib/pgsql/.ssh/id_rsa.pub" ] || ssh-keygen -q -t rsa -N '' <<< $'\ny'
    - cmd[${this.id}]: |-
        cat /var/lib/pgsql/.ssh/id_rsa.pub
    - cmd[sqldb]: 
        grep -q '${response.out}' /var/lib/pgsql/.ssh/authorized_keys || echo '${response.out}' >> /var/lib/pgsql/.ssh/authorized_keys

  preparePgpoolNodes:
    - cmd[pgpool]: |-
        [ -f ~/.pgpoolkey ] || echo 'defaultpgpoolkey' > ~/.pgpoolkey; chmod 600 ~/.pgpoolkey
    - cmd[pgpool]: |-
        sed -ci -e "s/^sr_check_password.*/sr_check_password = '${globals.pgpoolintpass}'/" /etc/pgpool-II/pgpool.conf
        sed -ci -e "s/^health_check_password.*/health_check_password = '${globals.pgpoolintpass}'/" /etc/pgpool-II/pgpool.conf
        pg_enc -m -f /etc/pgpool-II/pgpool.conf -u pgpool ${globals.pgpoolintpass}
        chown -R postgres:postgres /etc/pgpool-II
        systemctl reset-failed pgpool-II.service
      user: root

  adjustConfigs4PgpoolUser:
    - cmd[sqldb]: |-
        jem service stop;
        source /etc/jelastic/metainf.conf;
        if [ "$COMPUTE_TYPE_VERSION" -ge "13" ] ; then
            sed -ci -e "s|.*wal_keep_size =.*|wal_keep_size = 2048|g" ${globals.postgresqlConf}
        else
            sed -ci -e "s|.*wal_keep_segments =.*|wal_keep_segments = 256|g" ${globals.postgresqlConf}
        fi
        grep -q "^wal_log_hints" ${globals.postgresqlConf} || echo 'wal_log_hints = on' >> ${globals.postgresqlConf};
        jem service start;
      user: root

  initPrimary:
    - cmd[${nodes.sqldb.master.id}]: jcm initPrimary &>> /var/log/run.log
    - getPswd

  getPswd:
    - cmd[${nodes.sqldb.master.id}]: jcm getPswd
    - setGlobals: 
        pswd: ${response.out}

  initSecondary:
    - setNodeDisplayName[${this.id}]: Secondary
    - cmd[${nodes.sqldb.master.id}]: |-
        jcm addReplicaHost ${this.ip} &>> /var/log/run.log
        sudo jem service reload
    - cmd[${this.id}]: |-
        jcm setPswd ${globals.pswd}
        jcm initSecondary &>> /var/log/run.log

  getNodes:
      - script: |
          var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
          if (resp.result != 0) return resp;
          var nodes_address = [];
          for (var l = 0, k = resp.nodes; l < k.length; l++) {
            if (k[l].nodeGroup == 'sqldb') {
              nodes_address.push(k[l].address);
            }
          }
          return { result: 0, nodes_address: nodes_address.join(",") }
      - setGlobals:
          nodes_address: ${response.nodes_address}

  addPgNodesToPgPool:
    - forEach(pgpoolnode:nodes.pgpool):
      - cmd[${@pgpoolnode.id}]: jcm addPgNodeToPgpool2Conf ${this.pgaddress} &>>/var/log/run.log
        
  removePgNodesFromPgPool:
    - forEach(pgpoolnode:nodes.pgpool):
      - cmd[${@pgpoolnode.id}]: jcm removePgNodeFromPgpool2Conf ${this.pgaddress} &>>/var/log/run.log
        user: root
        
  getPgPoolNodesCount:
    - cmd[${nodes.pgpool.master.id}]: grep '^wd_port[0-9]*' /etc/pgpool-II/pgpool.conf|wc -l
    - setGlobals:
        pgPoolCount: ${response.out}
        
  setPgpoolNodeId:
    - cmd[${this.pgPoolNode}]: let PGPOOLCOUNT='${globals.pgPoolCount}+1'; [ -f "/etc/pgpool-II/pgpool_node_id" ] || jcm setPgpoolNodeId $PGPOOLCOUNT
      user: root
      
  addWatchdogConfig:
    - cmd[pgpool]: let PGPOOLCOUNT='${globals.pgPoolCount}+1'; jcm addWatchdogConfig $PGPOOLCOUNT ${this.pgpoolAddress}
      user: root
        
  removeWatchdogConfig:
    - cmd[pgpool]: jcm removeWatchdogConfig ${this.pgpoolAddress}
      user: root
  
  fixPgpassPermissions:
    - cmd[sqldb]: chmod 600 /var/lib/pgsql/.pgpass
      user: root
      
  addAppNameToConinfo:
    - cmd[${nodes.pgpool.master.id}]: grep '^backend_hostname' /etc/pgpool-II/pgpool.conf |grep ${this.address}|awk '{print $1}'|grep -o [[:digit:]].*
    - setGlobals:
        pgNodeNumber: ${response.out}
    - cmd[${this.id}]: sed -ci -e "s/port=5432 user=replication'/port=5432 user=replication application_name=server${globals.pgNodeNumber}'/g" ${globals.postgresqlConf}
      user: root
      
  setMaxWalSenders:
    - cmd[sqldb]: |-
        MAX_WAL_SENDERS=$(grep '^MAX_WAL_SENDERS' /usr/local/sbin/jcm | grep -o [0-9]*)
        if [[ "${nodes.sqldb.length}" -ge "${MAX_WAL_SENDERS}" ]] ; then
            sed -ci -e 's/^[[:space:]]*MAX_WAL_SENDERS.*/MAX_WAL_SENDERS=${nodes.sqldb.length}/' /usr/local/sbin/jcm
        fi
        MAX_WAL_SENDERS=$(grep '^max_wal_senders' ${globals.postgresqlConf}|grep -o [0-9]*)
        if [[ "${nodes.sqldb.length}" -ge "${MAX_WAL_SENDERS}" ]] ; then
            sed -ci -e 's/^[[:space:]]*max_wal_senders.*/max_wal_senders = ${nodes.sqldb.length}/' ${globals.postgresqlConf}
            jem service restart
        fi
      user: root
        
startPage: ${nodes.sqldb.master.url}
success:
  email: ${globals.successPath}
  text: ${globals.successPath}
